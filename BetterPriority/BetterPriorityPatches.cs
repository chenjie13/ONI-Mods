using System.Reflection;using Harmony;using UnityEngine;namespace Cj.ONIMods.BetterPriority{    public class BetterPriorityPatches    {        public const string MOD_NAME = "BetterPriority";                private static bool _isDevMod = true;        private static MeshRenderer _toolPriorityMesh;        private static GameObject _toolPrioityGo;        private static FieldInfo _activeModifiers;        private static FieldInfo _planProductInfoScreen;        private static FieldInfo _buildProductInfoScreen;        public static void OnLoad(string path)        {            _isDevMod = path.ToLower().Contains("/oxygennotincluded/mods/dev/");            Log($"OnLoad {_isDevMod} {path}");                        // Cache a ref to the reflection field            try {                _activeModifiers = typeof(KInputController).GetField("mActiveModifiers",                    BindingFlags.NonPublic | BindingFlags.Instance);                _planProductInfoScreen = typeof(PlanScreen).GetField("productInfoScreen",                    BindingFlags.NonPublic | BindingFlags.Instance);                _buildProductInfoScreen = typeof(BuildMenu).GetField("productInfoScreen",                    BindingFlags.NonPublic | BindingFlags.Instance);            } catch (AmbiguousMatchException e) {                Debug.LogException(e);            }        }        [HarmonyPatch(typeof(InterfaceTool), nameof(InterfaceTool.LateUpdate))]        public static class InterfaceTool_LateUpdate_Patch        {            public static bool IsPrioritizableTool(InterfaceTool tool)            {                return tool is AttackTool ||                       tool is ClearTool ||                       tool is DeconstructTool ||                       tool is CaptureTool ||                       tool is DigTool ||                       tool is DisinfectTool ||                       tool is HarvestTool ||                       tool is MopTool ||                       tool is BuildTool ||                       tool is UtilityBuildTool ||                       tool is WireBuildTool;            }            public static PrioritySetting GetToolPrioritySetting(InterfaceTool tool)            {                if (tool is BuildTool || tool is BaseUtilityBuildTool)                {                    if (BuildMenu.Instance != null)                        return BuildMenu.Instance.GetBuildingPriority();                    if (PlanScreen.Instance != null)                        return PlanScreen.Instance.GetBuildingPriority();                }                return ToolMenu.Instance.PriorityScreen.GetLastSelectedPriority();            }                        public static void SetToolPrioritySetting(InterfaceTool tool, PrioritySetting prioritySetting)            {                if (tool is BuildTool || tool is BaseUtilityBuildTool)                {                    ProductInfoScreen productInfoScreen = null;                    if (BuildMenu.Instance != null)                        productInfoScreen = _buildProductInfoScreen.GetValue(BuildMenu.Instance) as ProductInfoScreen;                    else if (PlanScreen.Instance != null)                        productInfoScreen = _planProductInfoScreen.GetValue(PlanScreen.Instance) as ProductInfoScreen;                    if (productInfoScreen == null) return;                                        productInfoScreen.materialSelectionPanel.PriorityScreen.SetScreenPriority(prioritySetting);                                    }                else                {                    ToolMenu.Instance.PriorityScreen.SetScreenPriority(prioritySetting);                }            }                        public static Vector3 GetToolPriorityTexOffset(InterfaceTool tool)            {                var offset = new Vector3(0, 0, 0.1f);                return offset;            }                        public static void Postfix(InterfaceTool __instance)            {                if (!IsPrioritizableTool(__instance)) return;                if (__instance.visualizer == null || !__instance.visualizer.activeSelf) return;                                if (_toolPriorityMesh == null)                {                    // Add priority visualizer to tool cursor                    _toolPrioityGo = Util.KInstantiate(PrioritizeTool.Instance.visualizer);                    _toolPrioityGo.transform.localScale = new Vector3(0.5f, 0.5f, 1);                    _toolPriorityMesh = _toolPrioityGo.GetComponentInChildren<MeshRenderer>();                }                if (_toolPriorityMesh == null) return;                                var prioritySetting = GetToolPrioritySetting(__instance);                var controller = Global.Instance.GetInputManager()?.GetDefaultController();                if (controller != null)                {                    // Log($"Old priority setting {prioritySetting.priority_class} {prioritySetting.priority_value}");                    var shiftDown = _activeModifiers != null && _activeModifiers.GetValue(controller)                                        is Modifier modifiers && modifiers == Modifier.Shift;                                        // If SHIFT is down and mouse scroll, change priority                    var isBasicPriorityClass = prioritySetting.priority_class == PriorityScreen.PriorityClass.basic;                    if (shiftDown && controller.GetKeyDown(KKeyCode.MouseScrollUp))                    {                        Log("Shift and MouseScrollUp");                        if (isBasicPriorityClass && prioritySetting.priority_value >= 9)                        {                            prioritySetting.priority_value = 1;                            prioritySetting.priority_class = PriorityScreen.PriorityClass.topPriority;                            SetToolPrioritySetting(__instance, prioritySetting);                        }                        else if (isBasicPriorityClass)                        {                            prioritySetting.priority_value++;                            SetToolPrioritySetting(__instance, prioritySetting);                        }                    }                    if (shiftDown && controller.GetKeyDown(KKeyCode.MouseScrollDown))                    {                        Log("Shift and MouseScrollDown");                        if (isBasicPriorityClass && prioritySetting.priority_value > 1)                        {                            prioritySetting.priority_value--;                            SetToolPrioritySetting(__instance, prioritySetting);                        }                        else if (prioritySetting.priority_class > PriorityScreen.PriorityClass.basic)                        {                            prioritySetting.priority_value = 9;                            prioritySetting.priority_class = PriorityScreen.PriorityClass.basic;                            SetToolPrioritySetting(__instance, prioritySetting);                        }                    }                    // Log($"New priority setting {prioritySetting.priority_class} {prioritySetting.priority_value}");                }                                // Update tool cursor priority visualizer                var texName = prioritySetting.priority_class >= PriorityScreen.PriorityClass.high  ? "max" : prioritySetting.priority_value.ToString();                var tex = Assets.GetSprite($"priority_{texName}");                if (tex == null)                {                    _toolPrioityGo.SetActive(false);                }                else                {                    _toolPrioityGo.SetActive(true);                    _toolPriorityMesh.material.mainTexture = tex.texture;                    _toolPrioityGo.transform.parent = __instance.visualizer.transform;                    _toolPrioityGo.transform.localPosition = GetToolPriorityTexOffset(__instance);                }            }        }        private static void Log(string content)        {            Debug.Log($"[{MOD_NAME}] {content}");        }    }}